#pragma once

#include "CPUBase.h"
#include "RegistersZ80.h"
#include "CPUUtils.h"

#include <vector>
#include <cstdint>
#include <iostream>
#include <array>
#include <memory>

class MemoryZ80;
class IOZ80;

class CPUZ80 : public CPUBase<CPUZ80> {
    public:
        CPUZ80(
            std::shared_ptr<MemoryZ80> memoryPtr,
            std::shared_ptr<IOZ80> ioPtr
        ) : memory(memoryPtr), io(ioPtr) {
            utils = CPUUtils();
        }

        ~CPUZ80() = default;

        void reset();
        void step();
        void decodeAndExecute(uint8_t opcode, uint8_t subOpcode = 0x00);
        void run();

        void pushStack(uint16_t value);
        uint16_t popStack();

        const RegistersZ80& getRegisters() const { return regs; }
        const MemoryZ80& getMemory() { return *memory; }
        const IOZ80& getIO() { return *io; }
        const std::vector<std::string>& getLastInstructions() const { return lastInstructions; }
        
        bool isRunning() const { return running; }
        void setRunning(bool value) { running = value; }
        bool isTurboMode() const { return turboMode; }
        void setTurboMode(bool value) { turboMode = value; }

        bool loadProgram(uint16_t startAddress, const std::vector<uint8_t>& program);
        void consoleDump();
        void testOpcodes();

    private:
        CPUUtils utils;
        RegistersZ80 regs;
        std::shared_ptr<MemoryZ80> memory;
        std::shared_ptr<IOZ80> io;

        bool running = false;
        bool turboMode = false;
        const double clockSpeed = 40000000.0;
        uint64_t lastCycleTime = 0;
        bool interruptsEnabled = false;
        std::vector<std::string> lastInstructions;
        enum OpcodePrefix {
            BASE = 0,
            CB   = 1,
            DD   = 2,
            ED   = 3,
            FD   = 4
        };

        std::array<std::array<uint8_t, 256>, 5> instructionCycles = {{
        {
            {
                // Główna tablica (brak prefiksu) 0x00-0xFF
                 4,10, 7, 6, 4, 4, 7, 4,   4,11, 7, 6, 4, 4, 7, 4,     // 0x00-0x0F
                 8,10, 7, 6, 4, 4, 7, 4,  12,11, 7, 6, 4, 4, 7, 4,     // 0x10-0x1F
                 8,10,16, 6, 4, 4, 7, 4,   8,11,16, 6, 4, 4, 7, 4,     // 0x20-0x2F
                 8,10,13, 6,19,19,15, 4,   8,11,13, 6, 4, 4, 7, 4,     // 0x30-0x3F
                 4, 4, 4, 4, 4, 4, 7, 4,   4, 4, 4, 4, 4, 4, 7, 4,     // 0x40-0x4F
                 4, 4, 4, 4, 4, 4, 7, 4,   4, 4, 4, 4, 4, 4, 7, 4,     // 0x50-0x5F
                 4, 4, 4, 4, 4, 4, 7, 4,   4, 4, 4, 4, 4, 4, 7, 4,     // 0x60-0x6F
                 7, 7, 7, 7, 7, 7, 7, 7,   4, 4, 4, 4, 4, 4, 7, 4,     // 0x70-0x7F
                 4, 4, 4, 4, 4, 4, 7, 4,   4, 4, 4, 4, 4, 4, 7, 4,     // 0x80-0x8F
                 4, 4, 4, 4, 4, 4, 7, 4,   4, 4, 4, 4, 4, 4, 7, 4,     // 0x90-0x9F
                 4, 4, 4, 4, 4, 4, 7, 4,   4, 4, 4, 4, 4, 4, 7, 4,     // 0xA0-0xAF
                 4, 4, 4, 4, 4, 4, 7, 4,   4, 4, 4, 4, 4, 4, 7, 4,     // 0xB0-0xBF
                11,10,10,10,17,11, 7,11,  11,10,10,10,17,17, 7,11,     // 0xC0-0xCF
                11,10,10,10,17,11, 7,11,  11,10,10,10,17,17, 7,11,     // 0xD0-0xDF
                11,10,10,18,17,11, 7,11,  11, 4,10, 4,17,17, 7,11,     // 0xE0-0xEF
                11,10,10, 4,17,11, 7,11,  11, 4,10, 4,17,17, 7,11      // 0xF0-0xFF
            }},
            {{
                // Prefiks CB (bitowe operacje i przesunięcia)
                 8, 8, 8, 8, 8, 8,15, 8,   8, 8, 8, 8, 8, 8,15, 8,      // 0x00-0x0F
                 8, 8, 8, 8, 8, 8,15, 8,   8, 8, 8, 8, 8, 8,15, 8,      // 0x10-0x1F
                 8, 8, 8, 8, 8, 8,15, 8,   8, 8, 8, 8, 8, 8,15, 8,      // 0x20-0x2F
                 8, 8, 8, 8, 8, 8,15, 8,   8, 8, 8, 8, 8, 8,15, 8,      // 0x30-0x3F
                 8, 8, 8, 8, 8, 8,12, 8,   8, 8, 8, 8, 8, 8,12, 8,      // 0x40-0x4F
                 8, 8, 8, 8, 8, 8,12, 8,   8, 8, 8, 8, 8, 8,12, 8,      // 0x50-0x5F
                 8, 8, 8, 8, 8, 8,12, 8,   8, 8, 8, 8, 8, 8,12, 8,      // 0x60-0x6F
                 8, 8, 8, 8, 8, 8,12, 8,   8, 8, 8, 8, 8, 8,12, 8,      // 0x70-0x7F
                 8, 8, 8, 8, 8, 8,15, 8,   8, 8, 8, 8, 8, 8,15, 8,      // 0x80-0x8F
                 8, 8, 8, 8, 8, 8,15, 8,   8, 8, 8, 8, 8, 8,15, 8,      // 0x90-0x9F
                 8, 8, 8, 8, 8, 8,15, 8,   8, 8, 8, 8, 8, 8,15, 8,      // 0xA0-0xAF
                 8, 8, 8, 8, 8, 8,15, 8,   8, 8, 8, 8, 8, 8,15, 8,      // 0xB0-0xBF
                 8, 8, 8, 8, 8, 8,15, 8,   8, 8, 8, 8, 8, 8,15, 8,      // 0xC0-0xCF
                 8, 8, 8, 8, 8, 8,15, 8,   8, 8, 8, 8, 8, 8,15, 8,      // 0xD0-0xDF
                 8, 8, 8, 8, 8, 8,15, 8,   8, 8, 8, 8, 8, 8,15, 8,      // 0xE0-0xEF
                 8, 8, 8, 8, 8, 8,15, 8,   8, 8, 8, 8, 8, 8,15, 8       // 0xF0-0xFF
            }},
            {{
                // Prefiks DD (IX) - większość jak główna tablica, z wyjątkami
                 0, 0, 0, 0, 0, 0, 0, 0,   0,15, 0, 0, 0, 0, 0, 0,      // 0x00-0x0F
                 0, 0, 0, 0, 0, 0, 0, 0,   0,15, 0, 0, 0, 0, 0, 0,      // 0x10-0x1F
                 0,14, 0, 0, 0, 0, 0, 0,   0,15, 0, 0, 0, 0, 0, 0,      // 0x20-0x2F
                 0,14, 0, 0, 0, 0, 0, 0,   0,15, 0, 0, 0, 0, 0, 0,      // 0x30-0x3F
                 0, 0, 0, 0, 8, 8,19, 0,   0, 0, 0, 0, 8, 8,19, 0,      // 0x40-0x4F
                 0, 0, 0, 0, 8, 8,19, 0,   0, 0, 0, 0, 8, 8,19, 0,      // 0x50-0x5F
                 0, 0, 0, 0, 8, 8,19, 0,   0, 0, 0, 0, 8, 8,19, 0,      // 0x60-0x6F
                19,19,19,19,19,19,19,19,   0, 0, 0, 0, 0, 0, 0, 0,      // 0x70-0x7F
                 0, 0, 0, 0, 8, 8,19, 0,   0, 0, 0, 0, 8, 8,19, 0,      // 0x80-0x8F
                 0, 0, 0, 0, 8, 8,19, 0,   0, 0, 0, 0, 8, 8,19, 0,      // 0x90-0x9F
                 0, 0, 0, 0, 8, 8,19, 0,   0, 0, 0, 0, 8, 8,19, 0,      // 0xA0-0xAF
                 0, 0, 0, 0, 8, 8,19, 0,   0, 0, 0, 0, 8, 8,19, 0,      // 0xB0-0xBF
                 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,      // 0xC0-0xCF
                 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,      // 0xD0-0xDF
                 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,      // 0xE0-0xEF
                 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0       // 0xF0-0xFF
            }},
            {{
                // Prefiks ED (rozszerzone instrukcje)
                 8, 8, 8, 8, 8, 8, 8, 8,   8, 8, 8, 8, 8, 8, 8, 8,      // 0x00-0x0F
                 8, 8, 8, 8, 8, 8, 8, 8,   8, 8, 8, 8, 8, 8, 8, 8,      // 0x10-0x1F
                12,12,12,12, 8, 8, 8, 8,  12,12,12,12, 8, 8, 8, 8,      // 0x20-0x2F
                12,12,12,12, 8, 8, 8, 8,  12,12,12,12, 8, 8, 8, 8,      // 0x30-0x3F
                 8, 8, 8, 8, 8, 8, 8, 8,   8, 8, 8, 8, 8, 8, 8, 8,      // 0x40-0x4F
                 8, 8, 8, 8, 8, 8, 8, 8,   8, 8, 8, 8, 8, 8, 8, 8,      // 0x50-0x5F
                16,16,16,16, 8, 8, 8, 8,  16,16,16,16, 8, 8, 8, 8,      // 0x60-0x6F
                16,16,16,16, 8, 8, 8, 8,  16,16,16,16, 8, 8, 8, 8,      // 0x70-0x7F
                 8, 8, 8, 8, 8, 8, 8, 8,   8, 8, 8, 8, 8, 8, 8, 8,      // 0x80-0x8F
                 8, 8, 8, 8, 8, 8, 8, 8,   8, 8, 8, 8, 8, 8, 8, 8,      // 0x90-0x9F
                21,21,16,16, 8, 8, 8, 8,  21,21,16,16, 8, 8, 8, 8,      // 0xA0-0xAF
                21,21,16,16, 8, 8, 8, 8,  21,21,16,16, 8, 8, 8, 8,      // 0xB0-0xBF
                 8, 8, 8, 8, 8, 8, 8, 8,   8, 8, 8, 8, 8, 8, 8, 8,      // 0xC0-0xCF
                 8, 8, 8, 8, 8, 8, 8, 8,   8, 8, 8, 8, 8, 8, 8, 8,      // 0xD0-0xDF
                 8, 8, 8, 8, 8, 8, 8, 8,   8, 8, 8, 8, 8, 8, 8, 8,      // 0xE0-0xEF
                 8, 8, 8, 8, 8, 8, 8, 8,   8, 8, 8, 8, 8, 8, 8, 8       // 0xF0-0xFF
            }},
            {{
                // Prefiks FD (IY) - analogicznie do DD
                 0, 0, 0, 0, 0, 0, 0, 0,   0,15, 0, 0, 0, 0, 0, 0,      // 0x00-0x0F
                 0, 0, 0, 0, 0, 0, 0, 0,   0,15, 0, 0, 0, 0, 0, 0,      // 0x10-0x1F
                 0, 14,0, 0, 0, 0, 0, 0,   0,15, 0, 0, 0, 0, 0, 0,      // 0x20-0x2F
                 0, 14,0, 0, 0, 0, 0, 0,   0,15, 0, 0, 0, 0, 0, 0,      // 0x30-0x3F
                 0, 0, 0, 0, 8, 8,19, 0,   0, 0, 0, 0, 8, 8,19, 0,      // 0x40-0x4F
                 0, 0, 0, 0, 8, 8,19, 0,   0, 0, 0, 0, 8, 8,19, 0,      // 0x50-0x5F
                 0, 0, 0, 0, 8, 8,19, 0,   0, 0, 0, 0, 8, 8,19, 0,      // 0x60-0x6F
                19,19,19,19,19,19,19,19,   0, 0, 0, 0, 0, 0, 0, 0,      // 0x70-0x7F
                 0, 0, 0, 0, 8, 8,19, 0,   0, 0, 0, 0, 8, 8,19, 0,      // 0x80-0x8F
                 0, 0, 0, 0, 8, 8,19, 0,   0, 0, 0, 0, 8, 8,19, 0,      // 0x90-0x9F
                 0, 0, 0, 0, 8, 8,19, 0,   0, 0, 0, 0, 8, 8,19, 0,      // 0xA0-0xAF
                 0, 0, 0, 0, 8, 8,19, 0,   0, 0, 0, 0, 8, 8,19, 0,      // 0xB0-0xBF
                 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,      // 0xC0-0xCF
                 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,      // 0xD0-0xDF
                 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0,      // 0xE0-0xEF
                 0, 0, 0, 0, 0, 0, 0, 0,   0, 0, 0, 0, 0, 0, 0, 0       // 0xF0-0xFF
            }}
        }
    };
};
